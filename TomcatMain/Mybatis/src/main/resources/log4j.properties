#优先级由低到高分为OFF,TRACE,DEBUG,INFO,WARN,ERROR,FATAL,ALL
#参数2：ConsoleAppender为输出位置
#ConsoleAppender（控制台），
#FileAppender（文件），
#DailyRollingFileAppender（每天产生一个日志文件），
#RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.rootLogger =DEBUG,ConsoleAppender,RollingFileAppender

#指定日志输出位置:
#ConsoleAppender（控制台），
#FileAppender（文件），
#DailyRollingFileAppender（每天产生一个日志文件），
#RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.ConsoleAppender=org.apache.log4j.ConsoleAppender

#指定日志布局样式:
#HTMLLayout（以HTML表格形式布局），
#PatternLayout（可以灵活地指定布局模式）
#SimpleLayout（包含日志信息的级别和信息字符串）
#TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.ConsoleAppender.layout=org.apache.log4j.PatternLayout
#指定日志样式:
#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目,通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式
#如： %d{yyyy年MM月dd日 HH:mm:ss,SSS}，输出类似：2012年01月05日 22:10:28,921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
#如： Testlog.main(TestLog.java:10)
#%F 输出日志消息产生时所在的文件名称
#%L 输出代码中的行号
#%x 输出和当前线程相关联的MDC(嵌套诊断环境),像java servlets多客户多线程的应用中
#%% 输出一个"%"字符
#可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
#%5c 输出category名称，最小宽度是5，category<5，默认的情况下右对齐
#%-5c 输出category名称，最小宽度是5，category<5，"-"号指定左对齐,会有空格
#%20.30c category名称<20补空格，并且右对齐，>30字符，就从左边交远销出的字符截掉
log4j.appender.ConsoleAppender.layout.ConversionPattern =  [%t][%-22d{yyyy/MM/dd HH:mm:ssS}] %m [%m] %F  %l %n




#/**通过文件FileAppender输出到文件*/
#log4j.appender.FileAppender=org.apache.log4j.FileAppender
#log4j.appender.FileAppender.layout=org.apache.log4j.PatternLayout
#log4j.appender.FileAppender.layout.ConversionPattern =  [%t][%-22d{yyyy/MM/dd HH:mm:ssS}] %m [%m] %F  %l %n
#log4j.appender.FileAppender.File=./Log4j/log4j.log
#log4j.appender.FileAppender.File.encoding= UTF-8




#/**通过文件RollingFileAppender输出到文件(按文件大小来保存)*/
log4j.appender.RollingFileAppender=org.apache.log4j.RollingFileAppender
#指定日志布局样式:
log4j.appender.RollingFileAppender.layout=org.apache.log4j.PatternLayout
#指定日志样式
log4j.appender.RollingFileAppender.layout.ConversionPattern =  [%t][%-22d{yyyy/MM/dd HH:mm:ssS}] %m [%m] %F  %l %n
#输出当前工程位置
log4j.appender.RollingFileAppender.File=./Log4j/log4j.log
#输出编码
log4j.appender.RollingFileAppender.File.encoding= UTF-8
#单文件大小
log4j.appender.RollingFileAppender.MaxFileSize=1MB
#最多创建10个文件,再多覆盖之前的
log4j.appender.RollingFileAppender.MaxBackupIndex=10


##/**通过文件DailyRollingFileAppender输出到文件(文件名为日期)*/
#log4j.appender.DailyRollingFileAppender=org.apache.log4j.DailyRollingFileAppender
##指定日志布局样式:
#log4j.appender.DailyRollingFileAppender.layout=org.apache.log4j.PatternLayout
##指定日志样式
#log4j.appender.DailyRollingFileAppender.layout.ConversionPattern =  [%t][%-22d{yyyy/MM/dd HH:mm:ssS}] %m [%m] %F  %l %n
##输出位置
#log4j.appender.DailyRollingFileAppender.File=./Log4j/log4j.log
##输出编码
#log4j.appender.DailyRollingFileAppender.File.encoding= UTF-8
##指定文件名
#log4j.appender.DailyRollingFileAppender.datePattern='.'yyyy-MM-dd-HH-mm'.log'
##指定日志消息的输出最低层次
#log4j.appender.DailyRollingFileAppender.Threshold = DEBUG
##默认值TRUE,将消息追加到指定文件中，false指将消息覆盖指定的文件内容
#log4j.appender.DailyRollingFileAppender.ImmediateFlush = TRUE
##:默认值是TRUE,所有的消息都会被立即输出
#log4j.appender.DailyRollingFileAppender.Append = TRUE


